@model PaginatedList<SSD_Major_Web_Project.ViewModels.OrderVM>
<div class="table-responsive">
    <table class="table transaction-table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Date</th>
                <th>Status</th>
                <th class="buyer">Buyer</th>
                <th class="product">Product</th>
                <th>Size</th>
                <th>Qty</th>
                <th>Order Total</th>
                <th class="buyer-note">Buyer Note</th>
                <th></th>
                <th></th>

                @{
                    if (ViewBag.OrderStatus == "Paid")
                    {

                                    <th></th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @{
                foreach (var item in Model)
                {
                    //first Line that lists eveything out
                    <tr id="@item.OrderId-0" class="@(item.OrderDetails.Count==1?"bold-border":"")">
                        <td> @Html.DisplayFor(modelItem => item.OrderId)</td>
                        <td> @Html.DisplayFor(modelItem => item.OrderDate)</td>
                        <td class="order-status"> @Html.DisplayFor(modelItem => item.OrderStatus)</td>
                        <td class=" buyer ellipsis">@Html.DisplayName($"{item.Contact.FirstName} {item.Contact.LastName}")</td>
                        <td class="product ellipsis"> @Html.DisplayFor(modelItem => item.OrderDetails[0].FkSku.FkProduct.Name)</td>
                        <td> @Html.DisplayFor(modelItem => item.OrderDetails[0].FkSku.Size)</td>
                        <td> @Html.DisplayFor(modelItem => item.OrderDetails[0].Quantity)</td>
                        <td> @Html.DisplayFor(modelItem => item.OrderTotal)</td>
                        <td class="buyer-note"> @Html.DisplayName(item.BuyerNote != ""&&item.BuyerNote!=null ? "Yes" : "No")</td>
                        @{
                            if (ViewBag.OrderStatus == "Paid")
                            {
                                <td><button class="btn" onclick="dispatchOrder(@item.OrderId)">Dispatch</button></td>
                            }
                        }
                        <td><button class="btn" onClick="getOrderDetail(@Json.Serialize(@item).ToString())">Detail</button></td>
                        @{
                            if (new List<string> { "Paid", "Shipped", "Delivered" }.Contains(ViewBag.OrderStatus))
                            {
                                <td><button class="btn" onclick="cancelOrder(@item.OrderId)">Cancel</button></td>
                            }
                        }
                    </tr>

                    //subsequent lines only lists additional order items
                    @for (var i = 1; i < item.OrderDetails.Count; i++)
                    {
                        <tr id="@item.OrderId-@i" class="@(i==item.OrderDetails.Count-1?"bold-border":"")">
                            <td>-</td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td class="product ellipsis"> @Html.DisplayFor(modelItem => item.OrderDetails[i].FkSku.FkProduct.Name)</td>
                            <td> @Html.DisplayFor(modelItem => item.OrderDetails[i].FkSku.Size)</td>
                            <td> @Html.DisplayFor(modelItem => item.OrderDetails[i].Quantity)</td>
                            <td></td>
                            <td></td>
                            <td class="buyer-note"></td>
                            @{
                                if (ViewBag.OrderStatus == "Paid")
                                {

                                                <td></td>
                                }
                            }
                            <td></td>
                            @{
                                if (new List<string> { "Paid", "Shipped", "Delivered" }.Contains(ViewBag.OrderStatus))
                                {
                                    <td></td>
                                }
                            }
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
</div>
<nav id="admin-orders-pagination">
    <ul class="pagination">
        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
            <a class="page-link"
               onClick="getFilteredAndPaginatedOrders(@(Model.PageIndex-1))">
                Previous
            </a>
        </li>
        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
            <a class="page-link"
               onClick="getFilteredAndPaginatedOrders(@(Model.PageIndex+1)) ">
                Next
            </a>
        </li>
    </ul>
</nav>
