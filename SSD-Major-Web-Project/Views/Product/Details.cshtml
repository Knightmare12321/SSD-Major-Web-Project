@model SSD_Major_Web_Project.ViewModels.ProductDetailVM
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager

@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@* @Html.DisplayFor(model => model.IsActive) *@
<div class="return-menu-btn">
    <a asp-action="Index">Back to List</a>
</div>

<div class="message-prompt">

</div>

<h1>@Html.DisplayFor(model => model.Name)</h1>
@if (User.IsInRole("Admin") || User.IsInRole("Manager"))
{
    
    
}
<div class="product-details-container">
    <div class="product-details-left">
        <div class="product-image-container">
            @if (Model.ImageByteArray != null && Model.ImageByteArray.Count > 0)
            {
                <img src="data:image/jpeg;base64,
                         @Convert.ToBase64String(Model.ImageByteArray[0])"
                     alt="Model.Name"
                     class="product-image mySlides"/>
                @for (int i = 1; i < Model.ImageByteArray.Count; i++)
                {
                    <img src="data:image/jpeg;base64,
                            @Convert.ToBase64String(Model.ImageByteArray[i])"
                         alt="Model.Name"
                         class="product-image mySlides" 
                         style = "display:none"/>
                }
            }
            else
            {
                <img src="~/images/No-Image-Placeholder.png"
                     alt="Model.Name"
                     class="product-image mySlides" />
            }
        </div>
        @if (Model.ImageByteArray != null && Model.ImageByteArray.Count > 1)
        {
            <div class="w3-row-padding w3-section">
                @for (int i = 0; i < Model.ImageByteArray.Count; i++)
                {
                    <div class="w3-col s4 sub-image">
                        <img class="demo w3-opacity w3-hover-opacity-off"
                             src="data:image/jpeg;base64,
                                    @Convert.ToBase64String(Model.ImageByteArray[i])"
                             style="width:100%;cursor:pointer"
                             alt="Model.Name"
                             onclick="currentDiv(@(i+1))" />
                    </div>
                }
            </div>
        }
    </div>
    <div class="product-details-right">
        <div class="info-container">
            <div>
                <h4>Select Size</h4>
            </div>
            <div class="size-container">
                @for (int i = 0; i < Model.Sizes.Count; i++)
                {
                    if (i == 0) {
                        <button class="size-button active" 
                                onclick="changeSize(event)" 
                                data-skuid="@Model.ProductSkuIDs[i]">@Model.Sizes[i]
                        </button>
                    }
                    else {
                        <button class="size-button" 
                                onclick="changeSize(event)" 
                                data-skuid="@Model.ProductSkuIDs[i]">@Model.Sizes[i]
                        </button>
                    }
                }
            </div>
            <hr />
            <div class="product-description">
                @Html.DisplayFor(model => model.Description)
            </div>
            <div class="product-price">
                $@Html.DisplayFor(model => model.Price)
            </div>
            <div class="product-buttons-container">
                <button id="product-add-to-bag" onclick="clickCart(event)">
                    ADD TO BAG
                </button>
                @if (!ViewBag.isFav)
                {
                    <button id="product-add-to-wishlist" onclick="clickFavorite(this)">
                        ADD TO FAVORITE
                    </button>
                }
                else
                {
                    <button id="product-add-to-wishlist" onclick="clickFavorite(this)">
                        REMOVE FROM FAVORITE
                    </button>
                }
            </div>
        </div>
        <div class="reviews-container">
            <h4>Reviews</h4>
            @if (SignInManager.IsSignedIn(User))
            {
                <p>
                    <a asp-action="CreateReview" asp-route-id="@Model.PkProductId">Rate this Product</a>
                </p>
            } else
            {
                <a class="nav-link text-dark" href="~/Identity/Account/Login">
                    <img src="~/images/icon/icon-login.png" alt="login" />
                    Sign in to create a Review
                </a>
            }
            <div class="reviews-list">

                    @if (Model.Reviews.Count == 0)
                    {
                        <p>This product has not yet been reviewed.</p>
                    }
                    else
                    {
                        <table>
                            <thead>
                                <tr>
                                    <th>User</th>
                                    <th>Rating</th>
                                    <th>Comment</th>
                                    <th>Date</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var review in Model.Reviews)
                                {
                                    <tr>
                                        <td>@review.FkCustomerId</td>
                                        <td>@GenerateStarRating(review.Rating)</td>
                                        <td>@review.Comment</td>
                                        <td>@review.PkReviewDate</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
            </div>
        </div>
    </div>
</div>

<script>
    function changeSize(e) {
        $(".size-button").removeClass("active");
        e.currentTarget.className += " active";
    }
    function clickCart(event) {
        var skuid = $(".size-button.active").data("skuid");
        const url = '@Url.Action("AddToCart", "Cookie")';
        $.ajax({
            type: "POST",
            url: url,
            data: { "id": skuid, "quantity": 1 },
            success: function (response) {
                if (response.success) {
                    console.log("Add to cart successful");
                    console.log(response.cart);
                }
                $(".message-prompt").text(response.message);
            }
        });
    }
    function clickFavorite(event) {
        console.log("calling clickFavorite");
        var id = @Model.PkProductId;
        console.log("pkid:" + id);
        var text = $(event).text().trim();
        console.log(text);
        if (text == "ADD TO FAVORITE") {
            console.log("add favorite now");
            const url = '@Url.Action("AddToFavorite", "Cookie")';
            $.ajax({
                type: "POST",
                url: url,
                data: { "id": id },
                success: function (response) {
                    if (response.success) {
                        $("#product-add-to-wishlist").text("REMOVE FROM FAVORITE");
                    }
                    $(".message-prompt").text(response.message);
                }
            });
        }
        else if (text == "REMOVE FROM FAVORITE") {
            console.log("remove favorite now");
            const url = '@Url.Action("RemoveFromFavorite", "Cookie")';
            $.ajax({
                type: "POST",
                url: url,
                data: { "id": id },
                success: function (response) {
                    if (response.success) {
                        $("#product-add-to-wishlist").text("ADD TO FAVORITE");
                    }
                    $(".message-prompt").text(response.message);
                }
            });
        }
        
    }
</script>


@functions {
    public string GenerateStarRating(int rating)
    {
        // Initialize an empty string to hold the star emojis
        string stars = "";

        // Loop through the rating value and add a star emoji for each rating
        for (int i = 0; i < rating; i++)
        {
            stars += "⭐"; // Add a star emoji
        }

        return stars; // Return the concatenated star emojis
    }
}

