@model SSD_Major_Web_Project.ViewModels.ShoppingCartVM


@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="shoppingcart-container">

    <div class="row">
        <h2>My Shopping Bag</h2>
        <div class="col-md-5">
            <div class="shopping-cart">
                @if (Model.Products.Count > 0)
                {
   
              
                        @foreach (var item in @Model.Products)
                    {
                        <div id="@(item.PkProductId)-tile" class="product">
                            @if (item.Images != null && item.Images.Count > 0)
                            {
                                <div class="img-container">
                                <img src="data:image/jpeg;base64,@Convert.ToBase64String(item.Images.FirstOrDefault().Data)" alt="@item.Name" class="product-image" />
                                </div>
                            } 
                            <div class="product-details">
                                <p>@item.Name</p>
                                <p>$@item.Price</p>
                                @foreach (var cartItem in Model.ShoppingCartItems)
                                {
                                    if (@cartItem.Quantity > 0)
                                    {
                                        foreach (var productSku in item.ProductSkus)
                                        {
                                            if (cartItem.SkuId == productSku.PkSkuId)
                                            {
                                                <div id="@(cartItem.SkuId)-tile" class="sku-tile">
                                                <p>Size: @productSku.Size</p>
                                                <p>Qty:</p>
                                                <div class="qty-section">
                                                    <button onclick="decrementQuantity(@cartItem.SkuId,@item.PkProductId)">-</button>
                                                    <p id="@(cartItem.SkuId)-qty" class="@(item.PkProductId) qty">@cartItem.Quantity</p>
                                                    <button onclick="incrementQuantity(@cartItem.SkuId)">+</button>
                                                        <button onclick="removeItem(@cartItem.SkuId,@item.PkProductId)" class="delete-btn"><img class="trash-can" src="~/images/icon/trash-can.png" /></button>
                                                </div>
                                                <p id="@(cartItem.SkuId)-qty-message"></p>
                                                </div>
                                                break;
                                            }
                                        }
                                    
                                    }
                                }

                            </div>
                        </div> 
                    }
                }
                else
                {
                    
                    <p>Your shopping cart is empty.</p>
                    <a href="/Product/Index"> Shop Now</a>
                    
                }

            </div>
            <div class="my-wishlist">
                <h2 style="margin-top:2rem;">My Favourites</h2>
            </div>
        </div>

        <div class="col-md-6 col-md-offset-2">

            <div class="coupon-code"> 
                    <input id="couponCodeInput" name="CouponCode" placeholder="Enter Coupon code" value="" />
                    <input id="applyCodeButton" type="button" value="Apply Code" class="btn btn-primary" />
               
            </div>
            <div class="coupon-code-message" style="margin-top:1rem; margin-bottom:1rem;">
                <span id="discountMessage" style="display:none;"></span>
                <p id="discountAmount" style="display:none;"></p>
            </div>


            <div class="shopping-cart-total-form">
                <div>
                    <dt class="col-sm-3">
                        <p>@Html.DisplayNameFor(model => model.Subtotal)</p>
                    </dt>
                </div>
                <div>
                    <dd class="col-sm-10">
                        <p id="subtotal">@Html.DisplayFor(model => model.Subtotal)</p>

                    </dd>
                </div>
             </div>

            <div id="discountSubtotalSection" style="display: none;">
                <div>
                    <dt class="col-sm-6">Total Discount Amount:</dt>
                </div>
                <div>
                    <dd class="col-sm-10" id="discountSubtotalAmount"></dd>
                </div>
            </div>

            <div id="afterDiscountSubtotal" style="display: none;">
                <div>
                    <dt class="col-sm-6">Discounted Subtotal:</dt>
                </div>
                <div>
                    <dd class="col-sm-10" id="afterDiscountSubtotalAmount"></dd>
                </div>
            </div>

             <div class="shopping-cart-total-form">
                    <dt class="col-sm-2">
                        <p>@Html.DisplayNameFor(model => model.ShippingFee)</p>
                    </dt>
                    <dd class="col-sm-10">
                        <p>@Html.DisplayFor(model => model.ShippingFee)</p>
                    </dd>
             </div>
             <div class="shopping-cart-total-form">
                    <dt class="col-sm-2">
                        <p>@Html.DisplayNameFor(model => model.Taxes)</p>
                    </dt>
                    <dd class="col-sm-10">
                    <p id="taxesAmount">@Html.DisplayFor(model => model.Taxes)</p>
                    </dd>
             </div>
             <div class="shopping-cart-total-form">
                    <dt class="col-sm-2">
                        <p>@Html.DisplayNameFor(model => model.GrandTotal)</p>
                    </dt>
                    <dd class="col-sm-10">
                    <p id="grandTotalAmount">@Html.DisplayFor(model => model.GrandTotal)</p>
                    </dd>
             </div>
   
            <div class="shopping-cart-total-submit">
                <form asp-action="CheckoutShippingContact" asp-controller="Shop" method="post">
                    <input type="hidden" asp-for="@Model.UserId" />
                    @foreach (var item in Model.ShoppingCartItems)
                    {
                        <input type="hidden" name="ShoppingCartItems.SkuId" value="@item.SkuId"/>
                        <input type="hidden" name="ShoppingCartItems.Quantity" value="@item.Quantity"/>

                    }
               
                    <input type="hidden" name="Subtotal" value="@Model.Subtotal" />
                    <input type="hidden" name="ShippingFee" value="@Model.ShippingFee" />
                    <input type="hidden" name="Taxes" value="@Model.Taxes" />
                    <input type="hidden" name="GrandTotal" value="@Model.GrandTotal" />
                    <input id="couponCodeHiddenInput" name="CouponCode" value="" hidden />


                    <button type="submit" class="btn btn-primary">Proceed to Checkout</button>
                </form>
            </div>
        </div>
    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var discountApplied = false;

        document.getElementById('applyCodeButton').addEventListener('click', function () {
            applyDiscount();
        });

    });

    // Function to reset the values back to initial state
    function resetValues() {
        var discountMessage = document.getElementById('discountMessage');
        var discountSubtotalSection = document.getElementById('discountSubtotalSection');
        var discountSubtotalAmount = document.getElementById('discountSubtotalAmount');
        var afterDiscountSubtotalAmount = document.getElementById('afterDiscountSubtotalAmount');
        var afterDiscountSubtotalSection = document.getElementById('afterDiscountSubtotal');
        var taxAmount = document.getElementById('taxesAmount');
        var grandTotalAmount = document.getElementById('grandTotalAmount');

        discountMessage.style.display = 'none';
        discountMessage.textContent = '';
        discountSubtotalSection.style.display = 'none';
        discountSubtotalAmount.textContent = '';
        afterDiscountSubtotalAmount.textContent = '';
        afterDiscountSubtotalSection.style.display = 'none';
        taxAmount.textContent = '';
        grandTotalAmount.textContent = '';
        
        //Calculate subtotal based on items shown in view
        var productDetails = document.getElementsByClassName('product-details');
        var subtotal = 0;
        for (var i = 0; i < productDetails.length; i++) {
            var unitPriceElement = productDetails[i].querySelector('p:nth-of-type(2)');
            var unitPrice = parseFloat(unitPriceElement.textContent);
            var unitPriceText = unitPriceElement.textContent;

            unitPrice = parseFloat(unitPriceText.substr(1));

            // Get the quantity element
            var quantityElement = productDetails[i].querySelectorAll('.qty');
            var quantity = Array.from(quantityElement)
                .map(element => parseInt(element.innerHTML.trim()))  // Extract integer values
                .reduce((acc, currentValue) => acc + currentValue, 0);

            subtotal += unitPrice * quantity;
        }

        var subtotalElement = document.getElementById('subtotal');
        subtotalElement.textContent = '$ ' + subtotal.toFixed(2);

        // Calculate and display the tax
        var taxRate = 0.12; // Assuming a tax rate of 10%
        var tax = subtotal * taxRate;
        var taxAmount = document.getElementById('taxesAmount');
        taxAmount.textContent = '$ ' + tax.toFixed(2);

        // Calculate and display the grand total
        var grandTotal = subtotal + tax;
        var grandTotalAmount = document.getElementById('grandTotalAmount');
        grandTotalAmount.textContent = '$ ' + grandTotal.toFixed(2);

        // Remove discount amount elements
        var discountAmountElements = document.getElementsByClassName('discount-amount');
        while (discountAmountElements.length > 0) {
            discountAmountElements[0].parentNode.removeChild(discountAmountElements[0]);
        }

        discountApplied = false;
    };

    const applyDiscount = () => {
        var couponCodeValue = document.getElementById('couponCodeInput').value;
        if (couponCodeValue == "") {
            return;
        }

        document.getElementById('couponCodeHiddenInput').value = couponCodeValue; // Set the coupon code value in the hidden field

        // Reset values before applying coupon code
        resetValues();

        // Send AJAX request to the controller action
        var xhr = new XMLHttpRequest();
        xhr.open('POST', '/Shop/CheckCouponCode?couponCode=' + couponCodeValue, true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.onload = function () {
            if (xhr.status === 200) {
                var response = JSON.parse(xhr.responseText);
                var discountMessage = document.getElementById('discountMessage');
                var discountSubtotalSection = document.getElementById('discountSubtotalSection');
                var discountSubtotalAmount = document.getElementById('discountSubtotalAmount');

                if (response.isActive && response.isValid) {
                    discountMessage.textContent = 'Discount applied!';
                    discountMessage.style.color = 'green';
                    discountApplied = true; // Set the flag to indicate discount has been applied

                    // Loop through each product and display the discount amount
                    var productDetails = document.getElementsByClassName('product-details');
                    var subtotal = 0;

                    for (var i = 0; i < productDetails.length; i++) {
                        var unitPriceElement = productDetails[i].querySelector('p:nth-of-type(2)');
                        var unitPrice = parseFloat(unitPriceElement.textContent);
                        var unitPriceText = unitPriceElement.textContent;
                        var currencySymbol = unitPriceText.charAt(0);

                        var unitPrice = parseFloat(unitPriceText.substr(1));

                        // Get the quantity element
                        var quantityElement = productDetails[i].querySelectorAll('.qty');
                        var quantity = Array.from(quantityElement)
                            .map(element => parseInt(element.innerHTML.trim()))  // Extract integer values
                            .reduce((acc, currentValue) => acc + currentValue, 0);

                        // Calculate the subtotal for the current product
                        var productSubtotal = unitPrice * quantity;



                        var discountAmountElement = document.createElement('p');

                        if (response.discountType === 'Percent') {
                            var calculatedDiscount = (unitPrice * response.discountAmount).toFixed(2);
                            var discountText = '(' + (response.discountAmount * 100) + '% off)';
                            var discountAmountText = '- $ ' + calculatedDiscount + ' per item';

                            discountAmountElement.innerHTML = discountText + '<br>' + discountAmountText;
                        }

                        discountAmountElement.classList.add('discount-amount');
                        productDetails[i].appendChild(discountAmountElement);

                        subtotal += unitPrice * quantity;
                    }

                    if (response.discountType === 'Percent') {
                        // Calculate discount subtotal
                        var discountSubtotal = subtotal * response.discountAmount; // Updated calculation
                        discountSubtotalAmount.textContent = '$' + discountSubtotal.toFixed(2);

                        // Show the discount subtotal section
                        discountSubtotalSection.style.display = 'block';

                        // Calculate and display the after-discount subtotal
                        var afterDiscountSubtotal = subtotal - discountSubtotal;
                        var afterDiscountSubtotalAmount = document.getElementById('afterDiscountSubtotalAmount');
                        afterDiscountSubtotalAmount.textContent = '$' + afterDiscountSubtotal.toFixed(2);

                        // Show the after-discount subtotal section
                        var afterDiscountSubtotalSection = document.getElementById('afterDiscountSubtotal');
                        afterDiscountSubtotalSection.style.display = 'block';
                    } else if (response.discountType === 'Number') {
                        // Handle discount type 'Number'
                        if (response.discountAmount > subtotal) {
                            discountMessage.textContent = 'Discount Amount is greater than subtotal, please add more items to your cart to use the coupon code.';
                            var couponCodeValue = document.getElementById('couponCodeInput').value;
                            document.getElementById('couponCodeHiddenInput').value = ""; // Reset the coupon code value

                            discountMessage.style.color = 'red';
                            afterDiscountSubtotal = subtotal;
                            // Calculate and display the tax
                            var taxRate = 0.12; // Assuming a tax rate of10%
                            var tax = afterDiscountSubtotal * taxRate;
                            var taxAmount = document.getElementById('taxesAmount');
                            taxAmount.textContent = '$ ' + tax.toFixed(2);

                            // Calculate and display the grand total
                            var grandTotal = afterDiscountSubtotal + tax;
                            var grandTotalAmount = document.getElementById('grandTotalAmount');
                            grandTotalAmount.textContent = '$ ' + grandTotal.toFixed(2);
                        } else {
                            // Calculate discount subtotal
                            var discountSubtotal = response.discountAmount; // Updated calculation
                            discountSubtotalAmount.textContent = '$ ' + discountSubtotal.toFixed(2);

                            // Show the discount subtotal section
                            discountSubtotalSection.style.display = 'block';

                            // Calculate and display the after-discount subtotal
                            var afterDiscountSubtotal = subtotal - discountSubtotal;
                            var afterDiscountSubtotalAmount = document.getElementById('afterDiscountSubtotalAmount');
                            afterDiscountSubtotalAmount.textContent = '$ ' + afterDiscountSubtotal.toFixed(2);

                            // Show the after-discount subtotal section
                            var afterDiscountSubtotalSection = document.getElementById('afterDiscountSubtotal');
                            afterDiscountSubtotalSection.style.display = 'block';
                        }
                    }

                    // Calculate and display the tax
                    var taxRate = 0.12; // Assuming a tax rate of 10%
                    var tax = afterDiscountSubtotal * taxRate;
                    var taxAmount = document.getElementById('taxesAmount');
                    taxAmount.textContent = '$ ' + tax.toFixed(2);

                    // Calculate and display the grand total
                    var grandTotal = afterDiscountSubtotal + tax;
                    var grandTotalAmount = document.getElementById('grandTotalAmount');
                    grandTotalAmount.textContent = '$ ' + grandTotal.toFixed(2);
                } else {
                    discountMessage.textContent = 'Invalid code.';
                    discountMessage.style.color = 'red';
                    var couponCodeValue = document.getElementById('couponCodeInput').value;
                    document.getElementById('couponCodeHiddenInput').value = "";
                }
                discountMessage.style.display = 'inline';

            }
        };
        xhr.send();
    };

    const incrementQuantity = (skuId) => {
        const url = '@Url.Action("AddToCart", "Cookie")';
        $.ajax({
            type: "POST",
            url: url,
            data: { "id": skuId, 'quantity': 1 },
            success: function (data) {
                if (data.success) {
                    //increment quantity
                    const qty = parseInt($("#" + skuId + "-qty").html());
                    $("#" + skuId + "-qty").html((qty + 1).toString());

                    //update shopping cart values
                    resetValues();
                    applyDiscount();
                }
            },
            error: function () {
                $("#" + skuId + "-qty-message").html("An unexpected error occured")
            }
        });
    };

    const decrementQuantity = (skuId, productId) => {
        const url = '@Url.Action("RemoveFromCart", "Cookie")';
        $.ajax({
            type: "POST",
            url: url,
            data: { "id": skuId },
            success: function (data) {
                if (data.success) {
                    //decrement quantity of that sku
                    const qty = parseInt($("#" + skuId + "-qty").html());
                    $("#" + skuId + "-qty").html((qty - 1).toString());

                    //check if there is any non-zero quantity across the entire product
                    hasQuantity = $("#" + productId + "-tile ." + productId)
                        .filter((index, qtyElement) => $(qtyElement).html() > 0)
                        .length > 0;

                    //if none of the sku has a non-zero quantity, remove it from the view
                    if (!hasQuantity) {
                        $("#" + productId + "-tile").remove();
                    }

                    //if no items is in cart, display default message
                    if ($(".product").length == 0) {
                        $(".shopping-cart").html("<p>Your shopping cart is empty.</p><a href='/Product/Index'> Shop Now </a>");
                    }
                    //update shopping cart values
                    resetValues();
                    applyDiscount();
                }
            },
            error: function () {
                $("#" + skuId + "-qty-message").html("An unexpected error occured")
            }
        });
    };

    const removeItem = (skuId, productId) => {
        const url = '@Url.Action("RemoveFromCart", "Cookie")';
        $.ajax({
            type: "POST",
            url: url,
            data: { "id": skuId,"allQuantity":true },
            success: function (data) {
                if (data.success) {
                    const numSkuTiles = $("#" + productId + "-tile .sku-tile").length;

                    if (numSkuTiles == 1) {
                        //remove listing completely from view if only one sku is in there
                        $("#" + productId + "-tile").remove();
                    } else {
                        //else remove that sku from view
                        $("#" + skuId + "-tile").remove();
                    }

                    //if no items is in cart, display default message
                    if ($(".product").length == 0) {
                        $(".shopping-cart").html("<p>Your shopping cart is empty.</p><a href='/Product/Index'> Shop Now </a>");
                    }

                    //update shopping cart values
                    resetValues();
                    applyDiscount();
                }
            },
            error: function () {
                $("#" + skuId + "-qty-message").html("An unexpected error occured")
            }
        });
    }

</script>