@model SSD_Major_Web_Project.ViewModels.CreateProductVM

@{
    ViewData["Title"] = "CreateProduct";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Create a New Product</h1>
<div asp-validation-summary="All" class="text-danger"></div>

<form id="create-product-grid" asp-action="CreateProduct" method="post">
    <div>
        <label>Product Name: </label>
        <input asp-validation-for="Name" type="text" name="Name" asp-for="Name" />
        <label>Image</label>
        <input type="file" onChange="addImage(this)"/>
        <input id="image" asp-validation-for="Image" name="Image" hidden />
    </div>
    <div>
        <label>Sizes</label>
        <div class="size-grid">
            <span>S</span><input asp-validation-for="Sizes" type="checkbox" name="Sizes" value="S" />
            <span>M</span><input asp-validation-for="Sizes" type="checkbox" name="Sizes" value="M" />
            <span>L</span><input asp-validation-for="Sizes" type="checkbox" name="Sizes" value="L" />
        </div>
        <label>Price</label>
        <div class="price">
            <input asp-validation-for="Price" asp-for="Price" name="price" type="number" step="0.01" /> <span> CAD</span>
        </div>
    </div>
    <div>
        <label>Description</label>
        <textarea asp-validation-for="Description" asp-for="Description" name="Description"></textarea>
        <div>
            <button type="submit">Submit</button> <button asp-action="Index">Cancel</button>
        </div>
    </div>
</form>

<script>
    const addImage = async (fileElement) => {
        // const blob = new Blob([fileElement.files[0]], {type:"image/jpeg"});
        // $("#image")[0].value = blob;

        $("#image")[0].value = await fileToByteArray(fileElement.files[0]);
        console.log('byte[]:', $("#image")[0].value)

        function fileToByteArray(file) {
            return new Promise((resolve, reject) => {
                try {
                    let reader = new FileReader();
                    let fileByteArray = [];
                    reader.readAsArrayBuffer(file);
                    reader.onloadend = (evt) => {
                        if (evt.target.readyState == FileReader.DONE) {
                            let arrayBuffer = evt.target.result,
                                array = new Uint8Array(arrayBuffer);
                            for (byte of array) {
                                fileByteArray.push(byte);
                            }
                        }
                        resolve(fileByteArray);
                    }
                }
                catch (e) {
                    reject(e);
                }
            })
        }

    }
</script>